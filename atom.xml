<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jiangjinxinn.github.io/</id>
    <title>空调房</title>
    <updated>2019-12-08T08:41:23.577Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jiangjinxinn.github.io/"/>
    <link rel="self" href="https://jiangjinxinn.github.io//atom.xml"/>
    <logo>https://jiangjinxinn.github.io//images/avatar.png</logo>
    <icon>https://jiangjinxinn.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, 空调房</rights>
    <entry>
        <title type="html"><![CDATA[Sublime 随手记]]></title>
        <id>https://jiangjinxinn.github.io//post/sublime-sui-shou-ji</id>
        <link href="https://jiangjinxinn.github.io//post/sublime-sui-shou-ji">
        </link>
        <updated>2019-12-08T08:05:25.000Z</updated>
        <content type="html"><![CDATA[<p>平时有一种场景就是需要临时复制一些文本，进行对比或者查看，一般这时候我会使用 Sublime，但是 Sublime 在关闭文件的时候会提示你保存，日积月累下来就有点烦了。由于我不会在 Sublime 进行代码的处理和文档的编写，所以找下办法把 Sublime 改成草稿纸。</p>
<figure data-type="image" tabindex="1"><img src="https://jiangjinxinn.github.io//post-images/1575792658471.jpg" alt=""></figure>
<hr>
<p>相关插件搜了一伙儿没有发现，到 Stack Overflow 上搜了下，找到了</p>
<p><a href="https://stackoverflow.com/questions/24663013/sublime-text-prompt-to-save-file">sublimetext2 - Sublime Text Prompt to Save File - Stack Overflow</a></p>
<p><a href="https://forum.sublimetext.com/t/request-dont-prompt-to-save-empty-untitled-tabs/685">Request: Don’t prompt to save empty “untitled” tabs - Ideas and Feature Requests - Sublime Forum</a></p>
<hr>
<p>用了下，很好，很满意，新创建的文档会被标记为草稿文件，修改后不会提示保存。修改已存在的文件仍然还有提示保存。</p>
<p>Stack Overflow 上的代码有个地方要改下</p>
<pre><code class="language-python">class SetNewScratchBuffer(sublime_plugin.EventListener):
    def on_new(self, view):
        view.set_scratch(True)

    def on__save(self, view):
        view.set_scratch(False)
</code></pre>
<p><code>on_save</code> 需要改成 <code>on_pre_save</code>。在 <a href="http://www.sublimetext.com/docs/3/api_reference.html#sublime_plugin.EventListener">Sublime API Reference</a> 没有看到 <code>on_save</code> 的信息。</p>
<p>还有个 bug，进程退出启动 Sublime 在默认的 untitled 文件上不会生效，但是不退出进程的话不会有这个问题，不知道是否是 Sublime 的 bug。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Stream 生成勾股数]]></title>
        <id>https://jiangjinxinn.github.io//post/stream-sheng-cheng-gou-gu-shu</id>
        <link href="https://jiangjinxinn.github.io//post/stream-sheng-cheng-gou-gu-shu">
        </link>
        <updated>2019-11-06T14:01:33.000Z</updated>
        <content type="html"><![CDATA[<p>突然想起去年看的《java8 实战》上的用 Stream 生成勾股数的例子。这里试一下。<br>
关键在于 flatMap 和生成先进行过滤再生成数组，虽然计算了两次开方，但是生成数组的开销更大。</p>
<pre><code class="language-java">import java.util.stream.IntStream;
import java.util.stream.Stream;

class Scratch {
    public static void main(String[] args) {
        long start = System.currentTimeMillis();
        Stream&lt;int[]&gt; pythagoreanTriple = IntStream.rangeClosed(1, 100).boxed()
                .flatMap(a -&gt; IntStream.rangeClosed(a, 100)
                        .filter(b -&gt; Math.sqrt(a * a + b * b) % 1 == 0)
                        .mapToObj(b -&gt; new int[]{a, b, (int) Math.sqrt(a * a + b * b)}));

        pythagoreanTriple.limit(10).forEach(t -&gt; System.out.println(t[0] + &quot; &quot; + t[1] + &quot; &quot; + t[2]));
        long end = System.currentTimeMillis();
        System.out.println(&quot;total time: &quot; + (end - start) + &quot;\n&quot;);


        long start2 = System.currentTimeMillis();
        Stream&lt;int[]&gt; pythagoreanTriple2 = IntStream.rangeClosed(1, 100).boxed()
                .flatMap(a -&gt; IntStream.rangeClosed(a, 100)
                        .mapToObj(b -&gt; new int[]{a, b, (int) Math.sqrt(a * a + b * b)}))
                        .filter(t -&gt; Math.sqrt(t[2]) % 1 == 0);

        pythagoreanTriple2.limit(10).forEach(t -&gt; System.out.println(t[0] + &quot; &quot; + t[1] + &quot; &quot; + t[2]));
        long end2 = System.currentTimeMillis();
        System.out.println(&quot;total time 2: &quot; + (end2 - start2) + &quot;\n&quot;);
    }
}
</code></pre>
<p>运行的结果</p>
<pre><code>3 4 5
5 12 13
6 8 10
7 24 25
8 15 17
9 12 15
9 40 41
10 24 26
11 60 61
12 16 20
total time: 91

1 1 1
1 4 4
1 9 9
1 16 16
1 25 25
1 36 36
1 49 49
1 64 64
1 81 81
1 100 100
total time 2: 3


Process finished with exit code 0
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[leetcode-cn.com ui 修改]]></title>
        <id>https://jiangjinxinn.github.io//post/leetcode-cncom-ui-xiu-gai</id>
        <link href="https://jiangjinxinn.github.io//post/leetcode-cncom-ui-xiu-gai">
        </link>
        <updated>2019-11-02T14:51:04.000Z</updated>
        <content type="html"><![CDATA[<h2 id="缘起">缘起</h2>
<p>由于看到 leetcode 中国版更新了新的代码编辑器和长久以来在 leetcode 美国版网络有时不顺畅，决定迁到中国版上来。</p>
<p>这时候就碰到了一个问题，中国版改了做题区的 ui，看着感觉非常的难受，不习惯。</p>
<p>美国版的做题区的头部标题区等浑然一体十分自然<br>
<img src="https://jiangjinxinn.github.io//post-images/1572706485835.png" alt=""></p>
<p>中国版标题区单独上移出来，最重要的是边框与底下部分加了阴影，感觉非常的奇怪。<br>
<img src="https://jiangjinxinn.github.io//post-images/1572706501580.png" alt=""></p>
<h2 id="动手改一下">动手改一下</h2>
<p>安装 chrome 的扩展插件 <a href="https://chrome.google.com/webstore/detail/stylus/clngdbkpkpeebahjckkjfobafhncgmne?hl=zh-CN">Stylus</a></p>
<blockquote>
<p>Stylus 是一个调整网页外观的用户样式管理器。它可让您轻松地为许多热门网站网站安装主题和皮肤。</p>
</blockquote>
<p>点击编写样式<br>
<img src="https://jiangjinxinn.github.io//post-images/1572707096588.png" alt=""></p>
<p>添加 css 样式修改下</p>
<pre><code class="language-css">[class*=&quot;HeaderCn&quot;] {
    box-shadow: none
}

[class*=&quot;ant-dropdown-menu-item&quot;] a[href]::after {
    display: none
}

[class*=&quot;NavbarListItem&quot;] a[href]::after {
    display: none
}

[class*=&quot;StyledBanner&quot;] {
    display: none
}
</code></pre>
<h2 id="最终效果">最终效果</h2>
<p>阴影去掉后看起来就舒服多。顺带导航栏上菜单文字后面的 new、hot 也一起处理掉了。<br>
<img src="https://jiangjinxinn.github.io//post-images/1572708099346.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[面试（2019 年 10 月）]]></title>
        <id>https://jiangjinxinn.github.io//post/mian-shi-2019-nian-10-yue</id>
        <link href="https://jiangjinxinn.github.io//post/mian-shi-2019-nian-10-yue">
        </link>
        <updated>2019-11-01T20:07:54.000Z</updated>
        <content type="html"><![CDATA[<h2 id="we-公司">we 公司</h2>
<p>10 月 18日</p>
<p>现场面（合计hr 面 2 小时 15 分）</p>
<p>面试官 1:</p>
<ol>
<li>问权限系统细节，权限有什么功能，怎么做的，请求量多少，RBCA 哪个层级</li>
<li>问用户系统</li>
<li>看过哪些源码？</li>
<li>spring bean 生命周期</li>
<li>假设一个类 A 如下，beanFactory 中有两个类型的 Car，beanId 为 carA，carB，下面类中中 Car能否注入成功， 如何让 car 的注入动态化</li>
</ol>
<pre><code>class A {
    @Resource
    private Car someCar;
    
    public someMethod(Car someCar) {
        // sout
    }
}
</code></pre>
<ul>
<li>如何实现一个 LRU 算法</li>
<li>写下递归 n 的阶层</li>
<li>java 中 juc 包下哪些锁是 cas 操作？</li>
<li>synchronized 和可重入锁，JMM、volatile</li>
<li>mysql 根据性别查询不同的用户怎么加索引</li>
<li>mysql 索引</li>
<li>浏览器地址栏输入网址后的过程</li>
<li>聊了下设计模式</li>
<li>聊了下分布式事务</li>
<li>产品经理比较烂怎么办</li>
</ul>
<p>面试官 2：</p>
<ul>
<li>react 的生命周期</li>
<li>webpack 用过没</li>
<li>zookeeper 一致性原理了，核心是啥</li>
<li>有没有高并发经验</li>
<li>实现以下代码，模仿ConcurrentHashMap 的computeIfAbsent，但是要求同样的 key 和 mappingFunction同时请求的时候只计算一次，阻塞其他线程</li>
</ul>
<pre><code>public class ConcurrentHashMap {
    public V computeIfAbsent(K key,
            Function&lt;? super K, ? extends V&gt; mappingFunction) {
        /**
        /* 要求 mappingFunction 只计算一次，即同样 key、mappingFunction 
        /* 调用的时候只计算一次,mappingFunction,阻塞另一个线程的调用
        */
    }
}
</code></pre>
<h2 id="yz-公司">yz 公司：</h2>
<p>电话面（约 30 分钟）</p>
<ol>
<li>聊权限系统表结构设计</li>
<li>为什么要使用分库分表</li>
<li>解释下一条 sql 在分库分表下是怎么查询的</li>
<li>项目中 mq 用来干嘛的</li>
<li>mq 消息发送失败怎么处理</li>
<li>inodb 索引</li>
<li>隔离级别</li>
<li>mvcc，隔离级别怎么实现的</li>
<li>讲下一致性视图</li>
<li>行锁</li>
</ol>
<h2 id="dd-公司">dd 公司</h2>
<p>电话面（约 1 小时 10 分）</p>
<ol>
<li>问用户系统架构，怎么设计的，问的非常细）</li>
<li>用户系统和权限、登录架构、依赖关系</li>
<li>
<ol>
<li>登录系统如何进行 用户权限资源 debug</li>
<li>登录系统如何高可用</li>
</ol>
</li>
<li>用户系统哪里做的不好、怎么把他做好，如何做到高可用</li>
<li>权限系统哪里做的不好、怎么把他做好</li>
<li>用户打分算法 bm5（听不清叫啥了）了解否</li>
<li>并发量有多少，请求量多少</li>
<li>微服务用的什么框架</li>
<li>简历上的校验框架干嘛的，有什么难点</li>
<li>介绍下 dubbo
<ol>
<li>dubbo 主要分层</li>
<li>注册中心挂了还能调用吗</li>
<li>讲述下服务端发起一次请求的过程</li>
<li>序列化机制有哪些</li>
<li>实现 dubbo 扩展机制 spi 要添加哪些类</li>
<li>序列化实现了解吗，为什么选用 hessian</li>
<li>负载均衡机制有哪些</li>
<li>让你来设计一个 rpc 框架，如何设计</li>
</ol>
</li>
<li>mysql 索引、mvcc</li>
<li>并发相关</li>
<li>
<ol>
<li>volatile 语义，使用场景、JMM<br>
2. sychronized 原理、讲述下锁优化、锁膨胀<br>
3. 可重入锁和读写锁<br>
4. 线程池包下主要有哪些类，主要是怎么设计的<br>
5. 线程池中的阻塞队列有哪些<br>
6. ConcurrentHashMap</li>
</ol>
</li>
<li>有没有碰到过 oom、sql 优化经验</li>
<li>redis
<ol>
<li>事务了解吗</li>
<li>管道操作了解吗</li>
<li>有哪些数据结构</li>
<li>集群</li>
</ol>
</li>
<li>Spring Boot</li>
<li>
<ol>
<li>讲述下你的理解，和 Spring 有哪些区别<br>
2. 条件装配怎么实现的<br>
3. 如何实现一个 SpringBoot Starter</li>
</ol>
</li>
</ol>
<h2 id="mk-公司">mk 公司</h2>
<p>现场面（合计hr 面约 2 小时 30 分）</p>
<p>面试官 1：</p>
<ul>
<li>Hashmap、ConcurrentHashMap
<ul>
<li>HashMap 并发环境下有什么问题</li>
<li>为什么使用红黑树</li>
<li>红黑树 crud 哪个操作最快</li>
</ul>
</li>
<li>JVM 内存区
<ul>
<li>介绍下常量池</li>
<li>堆中哪些对象可以作为 gc-roots</li>
<li>讲述下类加载过程</li>
</ul>
</li>
<li>Sychronized
<ul>
<li>讲一下锁膨胀如何实现</li>
<li>JMM 内存模型</li>
</ul>
</li>
<li>线程池参数
<ul>
<li>核心线程数与最大线程数的区别</li>
<li>工作队列有哪几种</li>
<li>核心线程数满了以后添加新任务如何处理的</li>
<li>任务拒绝策略有哪些</li>
</ul>
</li>
<li>BeanFactory 与 FactoryBean 的区别</li>
<li>讲一下 mysql 索引
<ul>
<li>联合索引（A,B,C) 查询（B,C) 能否使用索引，为什么？</li>
<li>讲一下mysql 索引使用需要注意的地方</li>
<li>索引底层数据结构</li>
<li>为什么使用 b+树</li>
</ul>
</li>
<li>Dubbo 了解吗
<ul>
<li>负载均衡有哪些策略</li>
<li>一致性 hash 原理</li>
</ul>
</li>
<li>ThreadLocal 使用过吗
<ul>
<li>ThreadLocal 有什么问题？</li>
<li>怎么实现的</li>
</ul>
</li>
<li>Redis
<ul>
<li>String 数据结构是如何实现的</li>
<li>讲下跳表</li>
<li>备份策略</li>
<li>主从同步</li>
</ul>
</li>
</ul>
<p>面试官 2：</p>
<ul>
<li>设计模式
<ul>
<li>设计模式有哪些原则</li>
<li>策略模式</li>
<li>模板方法</li>
</ul>
</li>
<li>数据结构
<ul>
<li>遍历图有几种方式</li>
</ul>
</li>
<li>有没有 oom 过</li>
<li>老年代的对象的年龄都不大是什么原因？如何调优？</li>
<li>面试官 1 问过线程池没😂</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nacos 服务删除失败的问题]]></title>
        <id>https://jiangjinxinn.github.io//post/nacos-fu-wu-shan-chu-shi-bai-de-wen-ti</id>
        <link href="https://jiangjinxinn.github.io//post/nacos-fu-wu-shan-chu-shi-bai-de-wen-ti">
        </link>
        <updated>2019-10-14T06:12:22.000Z</updated>
        <content type="html"><![CDATA[<p>在使用 Nacos 作为服务监控的功能的时候出现了一个问题：<br>
删除服务提示失败：<br>
<img src="https://jiangjinxinn.github.io//post-images/1571033820491.png" alt=""></p>
<p>提示是对应的服务不存在<br>
但是实际上 nacos 的后台管理页面上是存在的，并且我的后台页面上还出现了两个同名的服务，其中一个可以删除成功，另一个会报服务不存在</p>
<p>回忆了下我之前的操作，其中一次在注册服务实例的时候，在服务名后面带上了 <code>@@</code>，加这个原先是为了做服务区分用的，用<code>@@</code> 字符是因为我在 nacos 的源码中看到他们是用 group + <code>@@</code> + serviceName 作为 service 的标识的，想模仿一波，贴近风格。</p>
<p>直接到代码中找原因，先找到抛出异常的地方<br>
<code>com.alibaba.nacos.naming.core.ServiceManager#easyRemoveService</code></p>
<pre><code>    public void easyRemoveService(String namespaceId, String serviceName) throws Exception {

        Service service = getService(namespaceId, serviceName);
        if (service == null) {
            throw new IllegalArgumentException(&quot;specified service not exist, serviceName : &quot; + serviceName);
        }

        if (!service.allIPs().isEmpty()) {
            throw new IllegalArgumentException(&quot;specified service has instances, serviceName : &quot; + serviceName);
        }

        consistencyService.remove(KeyBuilder.buildServiceMetaKey(namespaceId, serviceName));
    }
</code></pre>
<p>获取 service 的方法在这个接口中<br>
<code>com.alibaba.nacos.naming.core.ServiceManager#getService</code></p>
<pre><code>    public Service getService(String namespaceId, String serviceName) {
        if (serviceMap.get(namespaceId) == null) {
            return null;
        }
        // 这里直接从 map 中查询 key 为serviceName 的 Service
        return chooseServiceMap(namespaceId).get(serviceName);
    }
</code></pre>
<p>可以看到就是到存储了 service 的 concurrentHashMap 中查询 service</p>
<pre><code>    /**
     * Map&lt;namespace, Map&lt;group::serviceName, Service&gt;&gt;
     */
    private Map&lt;String, Map&lt;String, Service&gt;&gt; serviceMap = new ConcurrentHashMap&lt;&gt;();
</code></pre>
<p>这里没有查询到，说明 serviceMap 没有存储了相应的键值对数据</p>
<p>那控制后台的数据哪里来的呢？<br>
<code>com.alibaba.nacos.naming.controllers.CatalogController#listDetail</code></p>
<pre><code>  @RequestMapping(value = &quot;/services&quot;, method = RequestMethod.GET)
    public Object listDetail(HttpServletRequest request) {

        boolean withInstances = Boolean.parseBoolean(WebUtils.optional(request, &quot;withInstances&quot;, &quot;true&quot;));

        if (withInstances) {
            String namespaceId = WebUtils.optional(request, CommonParams.NAMESPACE_ID,
                Constants.DEFAULT_NAMESPACE_ID);
            List&lt;ServiceDetailInfo&gt; serviceDetailInfoList = new ArrayList&lt;&gt;();
            int pageNo = Integer.parseInt(WebUtils.required(request, &quot;pageNo&quot;));
            int pageSize = Integer.parseInt(WebUtils.required(request, &quot;pageSize&quot;));
            String keyword = WebUtils.optional(request, &quot;keyword&quot;, StringUtils.EMPTY);

            List&lt;Service&gt; serviceList = new ArrayList&lt;&gt;(8);
            // 控制台上返回带数据来自这里，serviceList 传入serviceManager.getPagedService 方法中被填充了数据
            // 说明这里返回了数据，往下看下
            serviceManager.getPagedService(namespaceId, pageNo, pageSize, keyword, StringUtils.EMPTY, serviceList, false);

            for (Service service : serviceList) {
                ServiceDetailInfo serviceDetailInfo = new ServiceDetailInfo();
                // 这里将 Service 的名字进行了转化，就是之前说的，serviceName 是 group + serviceName，这里要把 group 去掉
                serviceDetailInfo.setServiceName(NamingUtils.getServiceName(service.getName()));
                serviceDetailInfo.setGroupName(NamingUtils.getGroupName(service.getName()));
                serviceDetailInfo.setMetadata(service.getMetadata());

                Map&lt;String, ClusterInfo&gt; clusterInfoMap = getStringClusterInfoMap(service);
                serviceDetailInfo.setClusterMap(clusterInfoMap);

                serviceDetailInfoList.add(serviceDetailInfo);
            }

            return serviceDetailInfoList;
        } else {
            return serviceList(request);
        }
    }
</code></pre>
<pre><code>public class NamingUtils {

    public static String getGroupedName(String serviceName, String groupName) {
        return groupName + Constants.SERVICE_INFO_SPLITER + serviceName;
    }

    public static String getServiceName(String serviceNameWithGroup) {
        if (!serviceNameWithGroup.contains(Constants.SERVICE_INFO_SPLITER)) {
            return serviceNameWithGroup;
        }
        // public static final String SERVICE_INFO_SPLITER = &quot;@@&quot;;
        // 这里直接加上将字符串分割，返回数据，所以如果你的服务的名字带有`@@`，`@@` 会被去掉
        return serviceNameWithGroup.split(Constants.SERVICE_INFO_SPLITER)[1];
    }

    public static String getGroupName(String serviceNameWithGroup) {
        if (!serviceNameWithGroup.contains(Constants.SERVICE_INFO_SPLITER)) {
            return Constants.DEFAULT_GROUP;
        }
        return serviceNameWithGroup.split(Constants.SERVICE_INFO_SPLITER)[0];
    }
}
</code></pre>
<p><code>com.alibaba.nacos.naming.core.ServiceManager</code> 中的存入 service 信息接口</p>
<pre><code>    public void putService(Service service) {
        if (!serviceMap.containsKey(service.getNamespaceId())) {
            synchronized (putServiceLock) {
                if (!serviceMap.containsKey(service.getNamespaceId())) {
                    serviceMap.put(service.getNamespaceId(), new ConcurrentHashMap&lt;&gt;(16));
                }
            }
        }
        // 可以看到存入 service 的时候，名字没有做处理
        serviceMap.get(service.getNamespaceId()).put(service.getName(), service);
    }
</code></pre>
<p>这里找到原因，原因就是，我之前测试的时候，出于一些原因再服务的 name 注册的时候<br>
<code>com.alibaba.nacos.api.naming.NamingService#registerInstance(java.lang.String, com.alibaba.nacos.api.naming.pojo.Instance)</code><br>
注册的服务的名字后面带上了<code>@@</code>，前台展示的时候，<code>@@</code> 由于字符串被去掉了，但是 nacos 上存取服务实例的 map 中的名称中实际上带有我添加的 <code>@@</code>，删除的时候就失败了，因为查找不到</p>
<p>🐸由于我后面测试的时候，注册的时候将<code>@@</code> 去掉了，所以看到注册的实例名字没有带<code>@@</code> 也没有察觉到不对</p>
<p>为什么 nacos 在返回 service 的时候要将<code>@@</code> 去掉，由前所述因为 group 和 serviceName 合在一个字符串里了</p>
<p>随后查看了下 nacos 中是有做字符检测的，但是正则写的有问题。。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[雨中泪水独白（Tears in rain monologue）]]></title>
        <id>https://jiangjinxinn.github.io//post/yu-zhong-lei-shui-du-bai-tears-in-rain-monologue</id>
        <link href="https://jiangjinxinn.github.io//post/yu-zhong-lei-shui-du-bai-tears-in-rain-monologue">
        </link>
        <updated>2019-10-09T16:18:17.000Z</updated>
        <content type="html"><![CDATA[<p>“	英语：I've seen things you people wouldn't believe. Attack ships on fire off the shoulder of Orion. I watched C-beams glitter in the dark near the Tannhäuser Gate. All those moments will be lost in time, like tears in rain. Time to die.	”</p>
<p>（我曾见过令你们人类难以置信的事情。我看到过战舰在猎户座肩旁熊熊燃烧，也曾看到Ｃ射线在唐怀瑟之门旁的黑暗里闪耀。所有的那些时刻，都将消逝在时光中，一如泪水，消失在雨中。死亡的时刻到了。）</p>
<p><a href="https://zh.wikipedia.org/wiki/%E9%9B%A8%E4%B8%AD%E6%B3%AA%E6%B0%B4%E7%8B%AC%E7%99%BD#cite_note-4">wikipedia</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Shading-JDBC]]></title>
        <id>https://jiangjinxinn.github.io//post/shading-jdbc</id>
        <link href="https://jiangjinxinn.github.io//post/shading-jdbc">
        </link>
        <updated>2019-10-06T13:42:56.000Z</updated>
        <content type="html"><![CDATA[<h2 id="流程">流程</h2>
<p>做在 jdbc 层面上</p>
<h2 id="分库分表策略">分库分表策略</h2>
<ul>
<li>垂直</li>
<li>水平</li>
<li>
<ul>
<li>绑定表</li>
</ul>
</li>
</ul>
<h2 id="分片">分片</h2>
<h3 id="新增">新增</h3>
<h2 id="行表达式">行表达式</h2>
<p>实现动机：配置的简化与一体化<br>
语法：使用 Groovy</p>
<p>sql between 时会抛出异常<code>org.springframework.dao.InvalidDataAccessApiUsageException: Inline strategy cannot support range sharding.; nested exception is java.lang.IllegalStateException: Inline strategy cannot support range sharding.</code></p>
<h2 id="分布式-id-生成">分布式 id 生成</h2>
<h3 id="雪花算法默认">雪花算法（默认）</h3>
<p><img src="https://jiangjinxinn.github.io//post-images/1570369804031.png" alt=""><br>
Sharding-JDBC 中生成后插入数据库中。</p>
<ol>
<li>时钟回拨<br>
服务器时钟回拨会导致产生重复序列，因此默认分布式主键生成器提供了一个最大容忍的时钟回拨毫秒 数。 如果时钟回拨的时间超过最大容忍的毫秒数阈值，则程序报错；如果在可容忍的范围内，默认分布式主键生成器会等待时钟同步到最后一次主键生成的时间后再继续工作。 最大容忍的时钟回拨毫秒数的默认值为0，可通过属性设置。<br>
https://www.jianshu.com/p/98c202f64652</li>
<li>worker id<br>
重复 worker id 会产生相同的 id https://cloud.tencent.com/developer/article/1074907<br>
worker id 如何配置？</li>
<li>没有并发量的情况下的话，序列号位几乎都是 1，根据路由规则都会路由到一个表中</li>
</ol>
<h2 id="分布式事务">分布式事务</h2>
<p>本地事务：ACID<br>
分布式事务：BASE，通过业务逻辑将互斥操作从资源层面上移至业务层面。通过放宽对强一致性要求，来换取系统吞吐量的提升</p>
<h3 id="xa">XA</h3>
<p><img src="https://jiangjinxinn.github.io//post-images/1570501311460.png" alt=""><br>
两阶段事务提交采用X/OPEN组织定义的DTP 模型，通过抽象出来的AP、TM、RM 的概念可以保证事务的强一致性。其中 TM 和 RM 之间采用 XA 协议进行双向通信。与传统的本地事务相比，XA 事务增加了 prepare 阶段，数据库除了被动接受提交指令以外，还可以反向通知调用方事务是否可以被提交。因此 TM可以收集各分支事务的prepare 结果，最后进行原子提交，保证事务的强一致性。<br>
分为准备阶段和提交阶段。每个参与者要么发送失败，要么在本地执行事务，写本地的 redo、undo 日志，但不提交。协调者收到了参与者失败消息或者超时消息，直接给每个参与者发送回滚（rollback）消息，否则发送提交（commit）消息。<br>
需要在多个节点之间进行协调，而各节点对锁资源的释放必须等到事务最终提交的时候。这样比起单阶段提交，会消耗更多时间。事务执行时间延长，意味着锁资源发生冲突的概率增加。</p>
<h3 id="saga">Saga</h3>
<p>多个短时事务组成的长时事务，在分布式场景下，我们把一个 Saga 分布式事务看做一个由多个本地事务组成的事务，每个事务都有一个与之对应的补偿事务。在 Saga 事务执行过程中，某一个出错后，Saga 事务会终止，同时会调用对应的补偿事务完成相关的恢复操作<br>
自动反向补偿。Saga 定义了一个事务中的每个子事务都对应一个反向补偿操作。Saga 事务管理器会根据执行结果生成一张有向无环图，并在执行回滚的时候根据该图一次执行反向补偿操作。Saga 事务管理器只用于何时重试，何时补偿，不负责补偿的内容，补偿的具体操作由开发者自行提供。<br>
Sharding-JDBC 采用了反向 sql 技术，将对数据库的更新操作的 sql 自动生成反向 sql，并交由 <a href="https://github.com/apache/servicecomb-saga-actuator">saga-actuator</a> 执行。</p>
<h3 id="seate">Seate</h3>
<p><a href="https://github.com/seata/seata">Seate</a><br>
<a href="https://shardingsphere.apache.org/document/current/cn/features/transaction/principle/base-transaction-seata/">Sharding-JDBC 的实现原理</a>。整合Seata AT事务时，需要把TM，RM，TC的模型融入到ShardingSphere 分布式事务的SPI的生态中。在数据库资源上，Seata通过对接 DataSource 接口，让JDBC操作可以同 TC 进行 RPC 通信。同样，ShardingSphere 也是面向 DataSource 接口对用户配置的物理 DataSource 进行了聚合，因此把物理 DataSource 二次包装为 Seata 的 DataSource 后，就可以把 Seata AT 事务融入到 ShardingSphere 的分片中。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring Batch 迁移数据]]></title>
        <id>https://jiangjinxinn.github.io//post/spring-batch-qian-yi-shu-ju</id>
        <link href="https://jiangjinxinn.github.io//post/spring-batch-qian-yi-shu-ju">
        </link>
        <updated>2019-10-03T17:26:51.000Z</updated>
        <content type="html"><![CDATA[<p>背景：<br>
埃森哲和 spring 合作，主要来自埃森哲的积累，随后 JSR-352 规范<br>
核心在于领域模型</p>
<p>相关资料:</p>
<ul>
<li><a href="https://cloud.tencent.com/developer/article/1456757">Spring Batch(1)——数据批处理概念                                                                            - 云+社区 - 腾讯云</a></li>
<li>https://docs.spring.io/spring-batch/4.2.x/reference/html/index.html</li>
<li>https://github.com/spring-projects/spring-batch/tree/master/spring-batch-samples</li>
<li>https://github.com/jxtaliu/SpringBatchSample</li>
</ul>
<p>领域模型:<br>
JobLanuncher、job、jobInstance<br>
flow<br>
step<br>
tasklet (细化小任务）<br>
chunk<br>
itemReader<br>
process<br>
itemWriter</p>
<p>一些问题:<br>
不要把 jpa reader writer 注册为 bean，注销 bean 的时候会 close EntityManager 两遍（这个没深究，解决了问题我就溜了）</p>
<p>任务 restart<br>
restart, 默认失败的任务下次启动会，重新执行，根据 JobRepository 存储的信息进行<br>
可以通过<code>org.springframework.batch.core.job.builder.JobBuilderHelper#preventRestart</code>  进行关闭<br>
也可以在<code>org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader#setSaveState</code> 对齐关闭</p>
<p>任务会在 <code>BATCH_STEP_EXECUTION_CONTEXT</code>  表中添加记录执行记录，已 <code>JpaPagingItemReader</code> 为例，会记录当前已进行到的数目count<br>
<code>{&quot;batch.taskletTypetaskletType&quot;:&quot;org.springframework.batch.core.step.item.ChunkOrientedTasklet&quot;,&quot;JpaPagingItemReader.read.count&quot;:428,&quot;batch.stepType&quot;:&quot;org.springframework.batch.core.step.tasklet.TaskletStep&quot;}</code><br>
如果失败了，下次会从记录的数目处开始读取，失败 skip 掉的数据，也会被算到读取的数据上</p>
<p>重试，跳过<br>
step 添加 backOffPolicy 等待一段时间</p>
<p>step 之间多线程<br>
多个 step 并发<br>
远程分片，分区</p>
<pre><code>package name.ealen.batch;

import name.ealen.config.ExecutorConfiguration;
import name.ealen.listener.JobListener;
import name.ealen.model.Access;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.batch.item.ItemReader;
import org.springframework.batch.item.ItemWriter;
import org.springframework.batch.item.database.JpaPagingItemReader;
import org.springframework.batch.item.database.orm.JpaNativeQueryProvider;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

import javax.annotation.Resource;
import javax.persistence.EntityManagerFactory;

//**/
/ * Created by EalenXie on 2018/9/10 14:50./
/ * :@EnableBatchProcessing提供用于构建批处理作业的基本配置/
/ *//
@Configuration
@EnableBatchProcessing
public class DataBatchConfiguration {
    private static final Logger /log/= LoggerFactory./getLogger/(DataBatchConfiguration.class);

    @Resource
    private JobBuilderFactory jobBuilderFactory;    //用于构建JOB

    @Resource
    private StepBuilderFactory stepBuilderFactory;  //用于构建Step

    @Resource
    private EntityManagerFactory emf;           //注入实例化Factory 访问数据

    @Resource
    private JobListener jobListener;            //简单的JOB listener

    @Resource
    private ThreadPoolTaskExecutor threadPoolTaskExecutor;

    //**/
/     * 一个简单基础的Job通常由一个或者多个Step组成/
/     *//
@Bean
    public Job dataHandleJob() {
        return jobBuilderFactory.get(&quot;dataHandleJob&quot;).
                incrementer(new RunIdIncrementer()).
                start(handleDataStep()).    //start是JOB执行的第一个step

//                next(xxxStep()).
//                next(xxxStep()).
//                ...
        listener(jobListener).      //设置了一个简单JobListener
                build();
    }

    //**/
/     * 一个简单基础的Step主要分为三个部分/
/     * ItemReader : 用于读取数据/
/     * ItemProcessor : 用于处理数据/
/     * ItemWriter : 用于写数据/
/     *//
@Bean
    public Step handleDataStep() {
        return stepBuilderFactory.get(&quot;getData&quot;).
                &lt;Access, Access&gt;chunk(100).        // &lt;输入,输出&gt; 。chunk通俗的讲类似于SQL的commit; 这里表示处理(processor)100条后写入(writer)一次。
                faultTolerant().retryLimit(3).retry(Exception.class).skipLimit(100).skip(Exception.class).
                listener(new SkipCheckingListener()). //捕捉到异常就重试,重试100次还是异常,JOB就停止并标志失败
                reader(getDataReader()).         //指定ItemReader
                processor(getDataProcessor()).   //指定ItemProcessor
                writer(getDataWriter()).         //指定ItemWriter
                build();
    }

    public ItemReader&lt;? extends Access&gt; getDataReader() {
        //读取数据,这里可以用JPA,JDBC,JMS 等方式 读入数据
        JpaPagingItemReader&lt;Access&gt; reader = new JpaPagingItemReader&lt;&gt;();
        //这里选择JPA方式读数据 一个简单的 native SQL
        String sqlQuery = “SELECT * FROM access”;
        try {
            JpaNativeQueryProvider&lt;Access&gt; queryProvider = new JpaNativeQueryProvider&lt;&gt;();
            queryProvider.setSqlQuery(sqlQuery);
            queryProvider.setEntityClass(Access.class);
            queryProvider.afterPropertiesSet();
            reader.setEntityManagerFactory(emf);
            reader.setPageSize(3);
            reader.setQueryProvider(queryProvider);
            reader.afterPropertiesSet();
            //所有ItemReader和ItemWriter实现都会在ExecutionContext提交之前将其当前状态存储在其中,如果不希望这样做,可以设置setSaveState(false)
            reader.setSaveState(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return reader;
    }

    public ItemProcessor&lt;Access, Access&gt; getDataProcessor() {
        return new ItemProcessor&lt;Access, Access&gt;() {
            @Override
            public Access process(Access access) throws Exception {
                /log/.info(“processor data : “ + access.toString());  //模拟  假装处理数据,这里处理就是打印一下
                return access;
            }
        };
//        lambda也可以写为:
//        return access -&gt; {
//            log.info(“processor data : “ + access.toString());
//            return access;
//        };
    }

    public ItemWriter&lt;Access&gt; getDataWriter() {
        return list -&gt; {
            for (Access access : list) {
                /log/.info(“write data : “ + access); //模拟 假装写数据 ,这里写真正写入数据的逻辑
            }
        };
    }


}

</code></pre>
<p>栗子：<br>
设置两个数据源，通过 spring batch 进行跨数据库数据迁移，通过 JpaPagingItemReader 进行读取数据，用 jdbcTemplate 进行数据写入，<br>
再实现 <code>org.springframework.batch.core.SkipListener</code> 接口记录跳过的数据，稍后人工处理，进行比对处理</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://jiangjinxinn.github.io//post/hello-gridea</id>
        <link href="https://jiangjinxinn.github.io//post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>